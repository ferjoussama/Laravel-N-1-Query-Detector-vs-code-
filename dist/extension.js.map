{"version":3,"file":"extension.js","mappings":"23BAUA,oBAAyBA,GACrBC,QAAQC,IAAI,kDAEZC,EAAuBC,EAAOC,UAAUC,2BAA2B,aACnEN,EAAQO,cAAcC,KAAKL,GAG3B,IAAIM,EAAgBL,EAAOM,SAASC,gBAAgB,qCAAqC,KACrFV,QAAQC,IAAI,wCACZE,EAAOQ,OAAOC,uBAAuB,oCACjCT,EAAOQ,OAAOE,kBACdC,EAAgBX,EAAOQ,OAAOE,iBAAiBE,SACnD,IAEJhB,EAAQO,cAAcC,KAAKC,GAG3BL,EAAOa,UAAUC,cAAcC,SAASH,IACR,QAAxBA,EAASI,YACTL,EAAgBC,EACpB,IAIJZ,EAAOa,UAAUI,yBAAyBC,IACJ,QAA9BA,EAAMN,SAASI,YACfL,EAAgBO,EAAMN,SAC1B,GAER,EAuDA,wBACQb,IACAA,EAAqBoB,QACrBpB,EAAqBqB,UAE7B,EAnGA,kBAIMC,EAAqD,CACvDC,IAAK,yDAGT,IAAIvB,EAqCJ,SAASY,EAAgBC,GACrB,GAJoB,QAIKA,EAASI,WAC9B,OAGJ,MAAMO,EAAUF,EAAeT,EAASI,YAClCQ,EAAmC,GAEzC,IAAIC,GAAS,EACTC,EAA8B,KAElC,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAASgB,UAAWD,IAAK,CACzC,MAAME,EAAOjB,EAASkB,OAAOH,GACvBI,EAAOF,EAAKE,KAGZC,EAAeD,EAAKE,MAAM,wCAahC,GAZID,IACAP,GAAS,EACTC,EAAeM,EAAa,IAI5BD,EAAKG,SAAS,MAAQT,IACtBA,GAAS,EACTC,EAAe,MAIfD,GAAUC,EAAc,CACxB,IAAIO,EACJ,KAAwC,QAAhCA,EAAQV,EAAQY,KAAKJ,KAEzB,GAAIE,EAAM,GAAGC,SAASR,GAAe,CACjC,MAAMU,EAAa,IAAIpC,EAAOqC,WAC1B,IAAIrC,EAAOsC,MAAMT,EAAKU,MAAMC,MAAOX,EAAKU,MAAME,KAC9C,iCAAiCR,EAAM,0DACvCjC,EAAO0C,mBAAmBC,SAE9BP,EAAWQ,KAAO,WAClBpB,EAAYpB,KAAKgC,EACrB,CAER,CACJ,CAEArC,EAAqB8C,IAAIjC,EAASkC,IAAKtB,EAC3C,C,UC5FAuB,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://n1-query-detector/./src/extension.ts","webpack://n1-query-detector/external commonjs \"vscode\"","webpack://n1-query-detector/webpack/bootstrap","webpack://n1-query-detector/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\ntype SupportedLanguages = 'php';\n\nconst QUERY_PATTERNS: Record<SupportedLanguages, RegExp> = {\n    php: /(\\$\\w+->\\w+\\([^)]*\\)|\\$\\w+->\\w+|\\$\\w+->\\w+\\([^)]*\\))/g, // Match both properties and methods of Eloquent models\n};\n\nlet diagnosticCollection: vscode.DiagnosticCollection;\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log(\"Laravel N+1 Query Detector extension activated\");\n\n    diagnosticCollection = vscode.languages.createDiagnosticCollection('n1Queries');\n    context.subscriptions.push(diagnosticCollection);\n\n    // Register the Detect N+1 Queries command\n    let detectCommand = vscode.commands.registerCommand('n1-query-detector.detectN1Queries', () => {\n        console.log(\"Detect N+1 Queries command triggered\");\n        vscode.window.showInformationMessage('Detecting Laravel N+1 Queries...');\n        if (vscode.window.activeTextEditor) {\n            analyzeDocument(vscode.window.activeTextEditor.document);\n        }\n    });\n    context.subscriptions.push(detectCommand);\n\n    // Analyze all open PHP documents\n    vscode.workspace.textDocuments.forEach((document) => {\n        if (document.languageId === 'php') {\n            analyzeDocument(document);\n        }\n    });\n\n    // Watch for changes in the document\n    vscode.workspace.onDidChangeTextDocument((event) => {\n        if (event.document.languageId === 'php') {\n            analyzeDocument(event.document);\n        }\n    });\n}\n\nfunction isLanguageSupported(language: string): language is SupportedLanguages {\n    return language === 'php';\n}\n\nfunction analyzeDocument(document: vscode.TextDocument) {\n    if (!isLanguageSupported(document.languageId)) {\n        return;\n    }\n\n    const pattern = QUERY_PATTERNS[document.languageId];\n    const diagnostics: vscode.Diagnostic[] = [];\n\n    let inLoop = false;\n    let loopVariable: string | null = null;\n\n    for (let i = 0; i < document.lineCount; i++) {\n        const line = document.lineAt(i);\n        const text = line.text;\n\n        // Detect if we're inside a foreach loop\n        const foreachMatch = text.match(/foreach\\s*\\((\\$\\w+)\\s+as\\s+(\\$\\w+)\\)/);\n        if (foreachMatch) {\n            inLoop = true;\n            loopVariable = foreachMatch[2]; // Capture the loop variable (e.g., $user)\n        }\n\n        // Detect if we're exiting a loop\n        if (text.includes('}') && inLoop) {\n            inLoop = false;\n            loopVariable = null;\n        }\n\n        // Detect queries inside the loop\n        if (inLoop && loopVariable) {\n            let match;\n            while ((match = pattern.exec(text)) !== null) {\n                // Check if the query depends on the loop variable\n                if (match[0].includes(loopVariable)) {\n                    const diagnostic = new vscode.Diagnostic(\n                        new vscode.Range(line.range.start, line.range.end),\n                        `Potential N+1 query detected: ${match[0]}. Consider using eager loading (e.g., with('posts')).`,\n                        vscode.DiagnosticSeverity.Warning\n                    );\n                    diagnostic.code = 'n1-query';\n                    diagnostics.push(diagnostic);\n                }\n            }\n        }\n    }\n\n    diagnosticCollection.set(document.uri, diagnostics);\n}\n\nexport function deactivate() {\n    if (diagnosticCollection) {\n        diagnosticCollection.clear();\n        diagnosticCollection.dispose();\n    }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","diagnosticCollection","vscode","languages","createDiagnosticCollection","subscriptions","push","detectCommand","commands","registerCommand","window","showInformationMessage","activeTextEditor","analyzeDocument","document","workspace","textDocuments","forEach","languageId","onDidChangeTextDocument","event","clear","dispose","QUERY_PATTERNS","php","pattern","diagnostics","inLoop","loopVariable","i","lineCount","line","lineAt","text","foreachMatch","match","includes","exec","diagnostic","Diagnostic","Range","range","start","end","DiagnosticSeverity","Warning","code","set","uri","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}